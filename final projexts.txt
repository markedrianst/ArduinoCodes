#include <Keypad.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>  // Include the Servo library

// Define LCD address and create object
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Set up the Servo object
Servo myServo;  

// Define the rows and columns for the keypad
const byte ROWS = 4; 
const byte COLS = 4; 

// Define the keymap
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

// Connect to the row and column pinouts of the keypad
byte rowPins[ROWS] = {9, 8, 7, 6}; 
byte colPins[COLS] = {5, 4, 3, 2}; 

// Create an object of the Keypad class
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

String password = "1234";  // Set your password
String input = "";         // Store the input password

// Define the buzzer, green LED, and red LED pins
const int buzzerPin = A1; // Buzzer connected to analog pin A1
const int greenLedPin = A2; // Green LED connected to analog pin A2
const int redLedPin = A3; // Red LED connected to analog pin A3

// Track invalid attempts
int invalidAttempts = 0;
const int maxAttempts = 4;

void setup() {
  lcd.init();
  lcd.clear();
  lcd.backlight();

  lcd.setCursor(1, 0);
  lcd.print("Enter Password:");

  myServo.attach(A0);  // Attach the servo on analog pin A0 to the servo object
  myServo.write(0);    // Set the servo to 0 degrees (locked position)

  pinMode(buzzerPin, OUTPUT); // Set the buzzer pin as output
  pinMode(greenLedPin, OUTPUT); // Set the green LED pin as output
  pinMode(redLedPin, OUTPUT); // Set the red LED pin as output

  // Turn on the red LED at idle
  digitalWrite(redLedPin, LOW);

  Serial.begin(9600);
}

void loop() {
  // If there are 4 invalid attempts, trigger alarm
  if (invalidAttempts >= maxAttempts) {
    lcd.clear();
    lcd.setCursor(1, 0);
    lcd.print("ALARM! LOCKED!");

    // Continuous buzzer alarm until reset
    while (true) {
      tone(buzzerPin, 1000);  // Continuous alarm tone
      
      // Blink the red LED in sync with the buzzer
      digitalWrite(redLedPin, HIGH); // Turn on red LED
      delay(500);                    // Wait for half a second
      noTone(buzzerPin);            // Stop the buzzer
      digitalWrite(redLedPin, LOW);  // Turn off red LED
      delay(500);                    // Wait for half a second

      // Check for key press to allow password entry during alarm
      char key = keypad.getKey();
      if (key) {
        Serial.print("Key Pressed: ");
        Serial.println(key);
        
        if (key == '#') {  // Check if the entered key is '#'
          if (input == password) {  // Check if the input matches the password
            // Deactivate the alarm
            lcd.clear();
            lcd.setCursor(1, 0);
            lcd.print("Alarm Deactivated");
            noTone(buzzerPin); // Stop the alarm sound
            digitalWrite(redLedPin, LOW); // Turn off the red LED
            myServo.write(90); // Unlock the door (optional)
            delay(2000); // Hold the state for 2 seconds
            lcd.clear();
            lcd.setCursor(1, 0);
            lcd.print("Enter Password:");

            // Reset state
            invalidAttempts = 0; // Reset invalid attempts
            input = ""; // Clear input
            break; // Exit the alarm loop
          }
          input = ""; // Clear the input if '#' is pressed
        }
      }
    }
  }

  char key = keypad.getKey();  // Read the key

  // If a key is pressed
  if (key) {
    tone(buzzerPin, 1000, 100); // Play a short beep (1000 Hz for 100 ms) on key press

    Serial.print("Key Pressed: ");
    Serial.println(key);
    
    if (key == '#') {  // Check if the entered key is '#'
      if (input == password) {  // Check if the input matches the password
        lcd.clear();
        lcd.setCursor(1, 0);
        lcd.print("Access Granted");

        // Buzzer beeps twice for access granted
        for (int i = 0; i < 2; i++) {
          tone(buzzerPin, 1000, 300);  // Play a 1000 Hz tone for 300 ms
          delay(300);                   // Delay between beeps
          noTone(buzzerPin);            // Stop the tone
          delay(300);                   // Delay before next beep
        }

        myServo.write(90);  // Unlock the door (rotate the servo to 90 degrees)
        digitalWrite(greenLedPin, HIGH); // Turn on the green LED
        digitalWrite(redLedPin, LOW);     // Turn off the red LED
        delay(5000);        // Keep the door unlocked for 5 seconds
        myServo.write(0);   // Lock the door again (rotate the servo back to 0 degrees)
        digitalWrite(greenLedPin, LOW);  // Turn off the green LED

        lcd.clear();
        lcd.setCursor(1, 0);
        lcd.print("Enter Password:");

        // Reset invalid attempt counter on success
        invalidAttempts = 0;
      } else {
        lcd.clear();
        lcd.setCursor(1, 0);
        lcd.print("Access Denied");

        tone(buzzerPin, 500, 500);  // Play a 500 Hz tone for 500ms (Access Denied sound)

        // Blink the red LED for access denied
        for (int i = 0; i < 6; i++) {  // Blink 6 times
          digitalWrite(redLedPin, HIGH); // Turn on the red LED
          delay(250);                    // Wait for 250 ms
          digitalWrite(redLedPin, LOW);  // Turn off the red LED
          delay(250);                    // Wait for 250 ms
        }

        delay(2000);        // Display "Access Denied" for 2 seconds
        lcd.clear();
        lcd.setCursor(1, 0);
        lcd.print("Enter Password:");

        // Increment invalid attempts
        invalidAttempts++;
      }
      input = "";  // Clear the input
    } else if (key == '*') {
      // Clear the input if '*' is pressed
      input = "";
      lcd.setCursor(0, 1);
      lcd.print("                "); // Clear the second line on the LCD
    } else {
      // Append the key to the input string
      input += key;
      lcd.setCursor(0, 1);
      lcd.print(input);  // Display the input on the LCD
    }
  }
}


servo a0
buzzer a1
led a2
led a3


keypad  digital 1-9
lcd sda slc 
